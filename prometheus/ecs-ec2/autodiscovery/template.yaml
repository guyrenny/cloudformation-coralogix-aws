AWSTemplateFormatVersion: '2010-09-07'
Parameters:
  ECSClusterName:
    Type: String
    Description: Enter the name of your ECS cluster from which you want to collect Prometheus metrics

  CreateIAMRoles:
    Type: String
    AllowedValues:
      - 'True'
      - 'False'
    Description: Whether to create new IAM roles or using existing IAM roles for the ECS tasks
    ConstraintDescription: must specifid, either True or False

  ECSNetworkMode:
    Type: String
    AllowedValues:
      - 'bridge'
      - 'host'
    Default: bridge
    Description: ECS Network Mode for the Task
    
  TaskRoleName:
    Type: String
    Description: Enter the CloudWatch Agent ECS task role name
    Default: ECSDiscoveryCWAgentTaskRoleName

  ExecutionRoleName:
    Type: String
    Description: Enter the CloudWatch Agent ECS execution role name
    Default: ECSDiscoveryCWAgentExecutionRoleName

  CoralogixRegion:
      Type: String
      Description: The Coralogix location region [Europe, Europe2, India, Singapore, US]
      AllowedValues:
        - Europe
        - Europe2
        - India
        - Singapore
        - US

  CoralogixPrivateKey:
    Type: String
    Description: The Coralogix Private Key
    NoEcho: true
  
  Image:
    Type: String
    Description: Open Telemetry Collector Image
    Default: coralogixrepo/otel-coralogix-ecs-ec2:latest

Conditions:
  CreateRoles:
    Fn::Equals:
      - Ref: CreateIAMRoles
      - 'True'

Mappings:
  CoralogixRegionMap:
    Europe:
      Endpoint: ingress.coralogix.com:443
      Domain: coralogix.com

    Europe2:
      Endpoint: ingress.eu2.coralogix.com:443
      Domain: eu2.coralogix.com

    India:
      Endpoint: ingress.coralogix.in:443
      Domain: coralogix.in

    Singapore:
      Endpoint: ingress.coralogixsg.com:443
      Domain: coralogixsg.com

    US:
      Endpoint: ingress.coralogix.us:443
      Domain: coralogix.us


Resources:
  OtelConfigSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub 'OpenTelemetryDiscoveryConfigName-${ECSClusterName}-EC2-${ECSNetworkMode}'
      Type: String
      Tier: Standard
      Description: !Sub 'Open Telemetry Prometheus Scraping Config SSM Parameter for ECS Cluster: ${ECSClusterName}'
      Value: !Base64 | # Opem Telemetry Collector Config
        extensions:
          ecs_observer:
            result_file: /tmp/ecs_sd_targets.yaml
            cluster_region: 'eu-west-1'
            cluster_name: cds-305
            services:
              - name_pattern: ^.*$
            docker_labels:
              - port_label: ECS_PROMETHEUS_EXPORTER_PORT
                metrics_path_label: ECS_PROMETHEUS_METRICS_PATH

        receivers:
          prometheus:
            config:
              scrape_configs:
                - job_name: "ecs-task"
                  file_sd_configs:
                    - files:
                        - '/tmp/ecs_sd_targets.yaml' # MUST match the file name in ecs_observer.result_file

        processors:
          batch:

        exporters:
          coralogix:
            domain: "${DOMAIN}"
            private_key: "${CX_TOKEN}"
            application_name: "otel-discovery-collector"
            subsystem_name: "ecs"
            application_name_attributes:
            - "aws.ecs.container.name"
            - "docker.name"
            - "APP_NAME"
            subsystem_name_attributes:
            - "ecs.task.definition.family"
            - "log.file.name"
            - "service.name"
            - "SUB_SYS"
            timeout: 30s

        service:
          pipelines:
            metrics:
              receivers:
                - prometheus
              processors:
                - batch
              exporters:
                - coralogix

          extensions:
            - ecs_observer

  OtelECSExecutionRole:
    Type: AWS::IAM::Role
    Condition: CreateRoles
    Properties:
      RoleName: !Ref ExecutionRoleName
      Description: Allows ECS container agent makes calls to the Amazon ECS API on your behalf.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ECSSSMInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*

        - PolicyName: 'AutoDiscoveryInlinePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:GetParameters'
                  - 'ec2:DescribeInstances'
                  - 'ecs:ListTasks'
                  - 'ecs:ListServices'
                  - 'ecs:DescribeContainerInstances'
                  - 'ecs:DescribeServices'
                  - 'ecs:DescribeTasks'
                  - 'ecs:DescribeTaskDefinition'
                Resource: '*'
                       
  OtelECSTaskRole:
    Type: AWS::IAM::Role
    Condition: CreateRoles
    DependsOn: OtelECSExecutionRole
    Properties:
      RoleName: !Ref TaskRoleName
      Description: Allows ECS tasks to call AWS services on your behalf.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: 'AutoDiscoveryInlinePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:GetParameters'
                  - 'ec2:DescribeInstances'
                  - 'ecs:ListTasks'
                  - 'ecs:ListServices'
                  - 'ecs:DescribeContainerInstances'
                  - 'ecs:DescribeServices'
                  - 'ecs:DescribeTasks'
                  - 'ecs:DescribeTaskDefinition'
                Resource: '*'

  OtelTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub 'opentelemetry-discovery-${ECSClusterName}-EC2-${ECSNetworkMode}'
      TaskRoleArn: !If [CreateRoles, !GetAtt OtelECSTaskRole.Arn, !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${TaskRoleName}']
      ExecutionRoleArn: !If [CreateRoles, !GetAtt  OtelECSExecutionRole.Arn, !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ExecutionRoleName}']
      NetworkMode: !Ref ECSNetworkMode
      Volumes:
        - Name: tmp
          Host:
            SourcePath: "/tmp"

      ContainerDefinitions:
        - Name: opentelemetry-agent-prometheus
          Image: !Ref Image
          Essential: true

          MountPoints:
            - SourceVolume: tmp
              ContainerPath: "/tmp"

          Secrets:
            - Name: OTEL_CONFIG
              ValueFrom: !Ref OtelConfigSSMParameter

          Environment:
            - Name: CX_TOKEN
              Value: !Ref CoralogixPrivateKey
            - Name: DOMAIN
              Value: !FindInMap [CoralogixRegionMap, !Ref CoralogixRegion, Domain]

      RequiresCompatibilities:
        - EC2
      Cpu: '512'
      Memory: '1024'

  ECSOtelDiscoveryService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSClusterName
      DesiredCount: 1
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: !Sub 'opentelemetry-discovery-service-EC2-${ECSNetworkMode}'
      TaskDefinition: !Ref OtelTaskDefinition
