Description: |
  This template is an example of a Fluentbit container running on ECS Fargate as a sidecar to an App.....
  This tempalte is not intented to be deployed directly, but rather it is expected that it will be used
  as an introduction to the concepts of Fluentbit sidecars for logs collection on ECS Fargate...
  
Parameters:
  ClusterName:
    Description: Your ECS Cluster name
    Type: String

  FluentBitImage:
    Description: Your fluentbit image
    Type: String

  AppImage:
    Description: Your application image
    Type: String

  Subnet:
    Description: |
      Fargate services require a Network Configuration. 
      This parameter represents the Subnet ID you wish
      to associate the running tasks
    Type: String
  
  PrivateKey:
    Type: String
    NoEcho: True

Resources:
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: 'ADOTPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                  - "ecr:*"
                Resource: '*'


  AppTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "fluentbit-testing"
      Cpu: "256"
      Memory: "512"
      RequiresCompatibilities:
        - "FARGATE"
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        # ------------------------
        # you can replace this with your 
        # own application container
        - Name: "app"
          Image: !Ref AppImage
          Essential: true
          LogConfiguration:
            LogDriver: "awsfirelens"
            Options:
              Format: "json_lines"
              Header: !Sub "private_key ${PrivateKey}"
              Retry_Limit: "10"
              compress: "gzip"
              Port: "443"
              Host: "ingress.coralogix.com"
              TLS: "On"
              URI: "/logs/rest/singles"
              Name: "http"
        # ------------------------

        # Fluentbit container
        - Name: "log_router"
          Image: !Ref FluentBitImage
          Essential: true
          User: "0"
          Environment:
            - Name: "APP_NAME"
              Value: "testfluent"
            - Name: "SUB_SYSTEM"
              Value: "aaaa"
          FirelensConfiguration:
            Type: "fluentbit"
            Options:
              config-file-type: "file"
              config-file-value: "/extra.conf"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              # create log group
              # NOTE: logs for this task will be sent to cloudwatch
              # However, logs from the application container will be sent to Coralogix
              awslogs-create-group: "true"
              awslogs-group: "/ecs/fluentbit-agent"
              awslogs-region: !Sub "AWS::Region"
              awslogs-stream-prefix: "ecs"
  
  PrometheusService:
    Type: "AWS::ECS::Service"
    # DependsOn: PrometheusLoadBalancerRule
    Properties:
      ServiceName: "app-service"
      SchedulingStrategy: REPLICA
      Cluster: !Ref ClusterName
      LaunchType: "FARGATE"
      TaskDefinition: !Ref AppTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet
